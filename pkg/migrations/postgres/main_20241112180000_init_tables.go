package postgres

import (
	"context"

	"github.com/c9s/rockhopper/v2"
)

func init() {
	AddMigration("main", up_main_initTables, down_main_initTables)
}

func up_main_initTables(ctx context.Context, tx rockhopper.SQLExecutor) (err error) {
	// This code is executed when the migration is applied.
	_, err = tx.ExecContext(ctx, "CREATE TABLE IF NOT EXISTS \"trades\" (\n    \"gid\" BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY, \n    \"id\" BIGINT, \n    \"order_id\" BIGINT, \n    \"exchange\" VARCHAR, \n    \"price\" decimal(20,8), \n    \"quantity\" decimal(20,8), \n    \"quote_quantity\" decimal(20,8), \n    \"symbol\" VARCHAR, \n    \"side\" VARCHAR, \n    \"is_buyer\" BOOLEAN, \n    \"is_maker\" BOOLEAN, \n    \"traded_at\" timestamptz, \n    \"fee\" decimal(20,8), \n    \"fee_currency\" VARCHAR, \n    \"is_margin\" BOOLEAN, \n    \"is_futures\" BOOLEAN, \n    \"is_isolated\" BOOLEAN, \n    \"strategy_id\" VARCHAR, \n    \"pnl\" DOUBLE PRECISION, \n    \"inserted_at\" timestamptz DEFAULT CURRENT_TIMESTAMP, \n    PRIMARY KEY (\"gid\")\n);")
	if err != nil {
		return err
	}
	_, err = tx.ExecContext(ctx, "CREATE TABLE IF NOT EXISTS \"orders\" (\n    \"exchange\" VARCHAR, \n    \"gid\" BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY, \n    \"order_id\" BIGINT, \n    \"uuid\" VARCHAR, \n    \"status\" VARCHAR, \n    \"executed_quantity\" decimal(20,8), \n    \"is_working\" BOOLEAN, \n    \"created_at\" timestamptz, \n    \"updated_at\" timestamptz, \n    \"is_futures\" BOOLEAN, \n    \"is_margin\" BOOLEAN, \n    \"is_isolated\" BOOLEAN, \n    \"client_order_id\" VARCHAR, \n    \"symbol\" VARCHAR, \n    \"side\" VARCHAR, \n    \"order_type\" varchar, \n    \"quantity\" decimal(20,8), \n    \"price\" decimal(20,8), \n    \"average_price\" decimal(20,8), \n    \"stop_price\" decimal(20,8), \n    \"time_in_force\" VARCHAR, \n    \"group_id\" INTEGER, \n    \"margin_side_effect\" VARCHAR, \n    \"reduce_only\" BOOLEAN, \n    \"close_position\" BOOLEAN, \n    PRIMARY KEY (\"gid\")\n);")
	if err != nil {
		return err
	}
	_, err = tx.ExecContext(ctx, "CREATE TABLE IF NOT EXISTS \"assets\" (\n    \"currency\" VARCHAR, \n    \"total\" decimal(20,8), \n    \"net_asset\" decimal(20,8), \n    \"interest\" decimal(20,8), \n    \"net_asset_in_usd\" decimal(20,8), \n    \"net_asset_in_btc\" decimal(20,8), \n    \"time\" timestamptz, \n    \"lock\" decimal(20,8), \n    \"available\" decimal(20,8), \n    \"borrowed\" decimal(20,8), \n    \"price_in_usd\" decimal(20,8)\n);")
	if err != nil {
		return err
	}
	_, err = tx.ExecContext(ctx, "CREATE TABLE IF NOT EXISTS \"deposits\" (\n    \"gid\" BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY, \n    \"exchange\" VARCHAR, \n    \"time\" timestamptz, \n    \"amount\" decimal(20,8), \n    \"asset\" VARCHAR, \n    \"address\" VARCHAR, \n    \"address_tag\" VARCHAR, \n    \"txn_id\" VARCHAR, \n    \"status\" VARCHAR, \n    \"unlock_confirm\" BIGINT, \n    \"confirmation\" VARCHAR,\n    PRIMARY KEY (\"gid\")\n);")
	if err != nil {
		return err
	}
	_, err = tx.ExecContext(ctx, "CREATE TABLE IF NOT EXISTS \"withdraws\" (\n    \"gid\" BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY, \n    \"exchange\" VARCHAR, \n    \"asset\" VARCHAR, \n    \"amount\" decimal(20,8), \n    \"address\" VARCHAR, \n    \"address_tag\" VARCHAR, \n    \"status\" VARCHAR, \n    \"original_status\" VARCHAR, \n    \"transaction_id\" VARCHAR, \n    \"txn_fee\" decimal(20,8), \n    \"transaction_fee_currency\" VARCHAR, \n    \"withdraw_order_id\" VARCHAR, \n    \"time\" timestamptz, \n    \"network\" VARCHAR, \n    PRIMARY KEY (\"gid\")\n);")
	if err != nil {
		return err
	}
	_, err = tx.ExecContext(ctx, "CREATE TABLE IF NOT EXISTS \"profits\" (\n    \"symbol\" VARCHAR, \n    \"quote_currency\" VARCHAR, \n    \"base_currency\" VARCHAR, \n    \"average_cost\" decimal(20,8), \n    \"profit\" decimal(20,8), \n    \"net_profit\" decimal(20,8), \n    \"profit_margin\" decimal(20,8), \n    \"net_profit_margin\" decimal(20,8), \n    \"trade_id\" BIGINT, \n    \"order_id\" BIGINT, \n    \"side\" VARCHAR, \n    \"is_buyer\" BOOLEAN, \n    \"is_maker\" BOOLEAN, \n    \"price\" decimal(20,8), \n    \"quantity\" decimal(20,8), \n    \"quote_quantity\" decimal(20,8), \n    \"fee_in_usd\" decimal(20,8), \n    \"fee\" decimal(20,8), \n    \"fee_currency\" VARCHAR, \n    \"exchange\" VARCHAR, \n    \"is_margin\" BOOLEAN, \n    \"is_futures\" BOOLEAN, \n    \"is_isolated\" BOOLEAN, \n    \"traded_at\" timestamptz, \n    \"strategy\" VARCHAR, \n    \"strategy_instance_id\" VARCHAR\n);")
	if err != nil {
		return err
	}
	_, err = tx.ExecContext(ctx, "CREATE TABLE IF NOT EXISTS \"rewards\" (\n    \"gid\" BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY, \n    \"uuid\" VARCHAR, \n    \"exchange\" VARCHAR, \n    \"type\" VARCHAR, \n    \"currency\" VARCHAR, \n    \"quantity\" decimal(20,8), \n    \"state\" VARCHAR, \n    \"note\" VARCHAR, \n    \"spent\" BOOLEAN, \n    \"created_at\" timestamptz DEFAULT current_timestamp, \n    PRIMARY KEY (\"gid\")\n);")
	if err != nil {
		return err
	}
	_, err = tx.ExecContext(ctx, "CREATE TABLE IF NOT EXISTS \"margin_interests\" (\n    \"gid\" BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY, \n    \"exchange\" VARCHAR, \n    \"asset\" VARCHAR, \n    \"principle\" decimal(20,8), \n    \"interest\" decimal(20,8), \n    \"interest_rate\" decimal(20,8), \n    \"isolated_symbol\" VARCHAR, \n    \"time\" timestamptz, \n    PRIMARY KEY (\"gid\")\n);")
	if err != nil {
		return err
	}
	_, err = tx.ExecContext(ctx, "CREATE TABLE IF NOT EXISTS \"margin_loans\" (\n    \"gid\" BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY, \n    \"exchange\" VARCHAR, \n    \"transaction_id\" BIGINT, \n    \"asset\" VARCHAR, \n    \"principle\" decimal(20,8), \n    \"time\" timestamptz, \n    \"isolated_symbol\" VARCHAR, \n    PRIMARY KEY (\"gid\")\n);")
	if err != nil {
		return err
	}
	_, err = tx.ExecContext(ctx, "CREATE TABLE IF NOT EXISTS \"margin_repays\" (\n    \"gid\" BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY, \n    \"exchange\" VARCHAR, \n    \"transaction_id\" BIGINT, \n    \"asset\" VARCHAR, \n    \"principle\" decimal(20,8), \n    \"time\" timestamptz, \n    \"isolated_symbol\" VARCHAR, \n    PRIMARY KEY (\"gid\")\n);")
	if err != nil {
		return err
	}
	_, err = tx.ExecContext(ctx, "CREATE TABLE IF NOT EXISTS \"klines\" (\n    \"gid\" BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY, \n    \"exchange\" VARCHAR, \n    \"symbol\" VARCHAR, \n    \"start_time\" timestamptz, \n    \"end_time\" timestamptz, \n    \"interval\" varchar, \n    \"open\" decimal(20,8), \n    \"close\" decimal(20,8), \n    \"high\" decimal(20,8), \n    \"low\" decimal(20,8), \n    \"volume\" decimal(20,8), \n    \"quote_volume\" decimal(20,8), \n    \"taker_buy_base_volume\" decimal(20,8), \n    \"taker_buy_quote_volume\" decimal(20,8), \n    \"last_trade_id\" BIGINT, \n    \"num_trades\" BIGINT, \n    \"closed\" BOOLEAN DEFAULT true,\n    PRIMARY KEY (\"gid\")\n);")
	if err != nil {
		return err
	}
	_, err = tx.ExecContext(ctx, "CREATE TABLE IF NOT EXISTS \"binance_klines\" (LIKE \"klines\" INCLUDING ALL);")
	if err != nil {
		return err
	}
	_, err = tx.ExecContext(ctx, "CREATE TABLE IF NOT EXISTS \"okex_klines\" (LIKE \"klines\" INCLUDING ALL);")
	if err != nil {
		return err
	}
	_, err = tx.ExecContext(ctx, "CREATE TABLE IF NOT EXISTS \"max_klines\" (LIKE \"klines\" INCLUDING ALL);")
	if err != nil {
		return err
	}
	return err
}

func down_main_initTables(ctx context.Context, tx rockhopper.SQLExecutor) (err error) {
	// This code is executed when the migration is rolled back.
	_, err = tx.ExecContext(ctx, "DROP TABLE IF EXISTS \"trades\";")
	if err != nil {
		return err
	}
	_, err = tx.ExecContext(ctx, "DROP TABLE IF EXISTS \"orders\";")
	if err != nil {
		return err
	}
	_, err = tx.ExecContext(ctx, "DROP TABLE IF EXISTS \"assets\";")
	if err != nil {
		return err
	}
	_, err = tx.ExecContext(ctx, "DROP TABLE IF EXISTS \"deposits\";")
	if err != nil {
		return err
	}
	_, err = tx.ExecContext(ctx, "DROP TABLE IF EXISTS \"withdraws\";")
	if err != nil {
		return err
	}
	_, err = tx.ExecContext(ctx, "DROP TABLE IF EXISTS \"profits\";")
	if err != nil {
		return err
	}
	_, err = tx.ExecContext(ctx, "DROP TABLE IF EXISTS \"rewards\";")
	if err != nil {
		return err
	}
	_, err = tx.ExecContext(ctx, "DROP TABLE IF EXISTS \"margin_interests\";")
	if err != nil {
		return err
	}
	_, err = tx.ExecContext(ctx, "DROP TABLE IF EXISTS \"margin_loans\";")
	if err != nil {
		return err
	}
	_, err = tx.ExecContext(ctx, "DROP TABLE IF EXISTS \"margin_repays\";")
	if err != nil {
		return err
	}
	_, err = tx.ExecContext(ctx, "DROP TABLE IF EXISTS \"binance_klines\";")
	if err != nil {
		return err
	}
	_, err = tx.ExecContext(ctx, "DROP TABLE IF EXISTS \"okex_klines\";")
	if err != nil {
		return err
	}
	_, err = tx.ExecContext(ctx, "DROP TABLE IF EXISTS \"max_klines\";")
	if err != nil {
		return err
	}
	_, err = tx.ExecContext(ctx, "DROP TABLE IF EXISTS \"klines\";")
	if err != nil {
		return err
	}
	return err
}
